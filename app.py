# app.py

# -------------------------------
# Import Dependencis
# -------------------------------
import streamlit as st
import numpy as np
from io import BytesIO

# ML
from sklearn.datasets import make_classification
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# PDF
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.lib.colors import HexColor


# -------------------------------
# Helpers: Credit score & PDF
# -------------------------------

def estimate_credit_score(
    on_time_payment_ratio: float,
    credit_utilization_pct: float,
    credit_age_years: float,
    hard_inquiries_last_12m: int,
    delinquencies_24m: int,
) -> int:
    """
    Very simple heuristic score estimator (300-850) based on common drivers.
    This is a demo, not a real credit model.
    """
    base = 620

    # Payment history (strong positive influence)
    base += int((on_time_payment_ratio - 0.90) * 500)  # 90% → 0; 100% → +50

    # Utilization (lower is better)
    util_penalty = max(0, (credit_utilization_pct - 30)) * 1.2  # >30% starts hurting
    base -= int(util_penalty)

    # Credit age (longer is better)
    base += int(min(credit_age_years, 15) * 3)  # cap at 15 years

    # Inquiries (fewer is better)
    base -= hard_inquiries_last_12m * 10

    # Delinquencies (very negative)
    base -= delinquencies_24m * 35

    # Clip to 300–850
    return int(np.clip(base, 300, 850))


def generate_pdf(summary: dict, inputs: dict) -> bytes:
    """
    Create a simple A4 PDF summary in memory and return bytes.

    summary keys expected:
      - applicant_name, credit_score, dti, prob_default_pct, risk_label, decision, notes

    inputs keys expected (strings/numbers):
      - gross_monthly_income, monthly_debt_payments, on_time_payment_ratio,
        credit_utilization_pct, credit_age_years, hard_inquiries_last_12m,
        delinquencies_24m, loan_amount, interest_rate_pct, term_months
    """
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4

    # Header
    c.setFillColor(HexColor("#0F766E"))
    c.setFont("Helvetica-Bold", 16)
    c.drawString(20 * mm, height - 25 * mm, "Loan Risk & Decision Summary")

    # Body
    c.setFillColor(HexColor("#000000"))
    c.setFont("Helvetica", 11)

    y = height - 40 * mm
    line_gap = 7 * mm

    def line(label, value):
        nonlocal y
        c.setFont("Helvetica-Bold", 11)
        c.drawString(20 * mm, y, f"{label}:")
        c.setFont("Helvetica", 11)
        c.drawString(65 * mm, y, f"{value}")
        y -= line_gap

    # Summary block
    line("Applicant", summary.get("applicant_name", "—"))
    line("Credit Score", summary.get("credit_score", "—"))
    line("Debt-to-Income (DTI)", f"{summary.get('dti', 0):.1f}%")
    line("Default Probability", f"{summary.get('prob_default_pct', 0):.1f}%")
    line("Risk Band", summary.get("risk_label", "—"))
    line("Decision", summary.get("decision", "—"))

    # Inputs block
    y -= 4 * mm
    c.setFont("Helvetica-Bold", 12)
    c.drawString(20 * mm, y, "Key Inputs")
    y -= line_gap

    def iline(label, value):
        nonlocal y
        c.setFont("Helvetica", 11)
        c.drawString(25 * mm, y, f"- {label}: {value}")
        y -= 6 * mm

    iline("Gross Monthly Income (USD)", f"{inputs.get('gross_monthly_income', 0):,.2f}")
    iline("Monthly Debt Payments (USD)", f"{inputs.get('monthly_debt_payments', 0):,.2f}")
    iline("On-time Payment Ratio (24m)", f"{inputs.get('on_time_payment_ratio', 0):.2f}")
    iline("Credit Utilization (%)", f"{inputs.get('credit_utilization_pct', 0):.0f}%")
    iline("Credit History Age (years)", f"{inputs.get('credit_age_years', 0):.1f}")
    iline("Hard Inquiries (12m)", f"{inputs.get('hard_inquiries_last_12m', 0)}")
    iline("Delinquencies (24m)", f"{inputs.get('delinquencies_24m', 0)}")
    iline("Requested Loan Amount (USD)", f"{inputs.get('loan_amount', 0):,.2f}")
    iline("Estimated APR (%)", f"{inputs.get('interest_rate_pct', 0):.1f}%")
    iline("Term (months)", f"{inputs.get('term_months', 0)}")

    # Notes block
    notes = summary.get("notes", "")
    if notes:
        y -= 4 * mm
        c.setFont("Helvetica-Bold", 11)
        c.drawString(20 * mm, y, "Notes:")
        y -= line_gap
        c.setFont("Helvetica", 11)
        max_chars = 90
        for i in range(0, len(notes), max_chars):
            c.drawString(20 * mm, y, notes[i:i+max_chars])
            y -= 6 * mm

    # Footer
    c.setFont("Helvetica-Oblique", 9)
    c.setFillColor(HexColor("#444444"))
    c.drawString(20 * mm, 15 * mm, "Generated by Streamlit demo — not financial advice")

    c.showPage()
    c.save()
    pdf = buffer.getvalue()
    buffer.close()
    return pdf


# -------------------------------
# Demo model (cached)
# -------------------------------

@st.cache_resource(show_spinner=False)
def load_model():
    """
    Train a tiny demo classifier once.
    - 6 total features
    - Avoids ValueError from make_classification by ensuring:
      n_informative + n_redundant + n_repeated < n_features
    """
    X, y = make_classification(
        n_samples=4000,
        n_features=6,
        n_informative=4,
        n_redundant=1,
        n_repeated=0,
        n_clusters_per_class=2,
        class_sep=1.0,
        random_state=42,
    )
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
    clf = LogisticRegression(max_iter=200)
    clf.fit(X_train, y_train)
    return clf


# -------------------------------
# Streamlit App
# -------------------------------

st.set_page_config(page_title="Loan Risk & Decision Assistant", page_icon="💳", layout="centered")
st.title("💳 Loan Risk & Decision Assistant")
st.caption("Demo only — not financial advice.")

with st.expander("What affects my score?"):
    st.markdown(
        """
**Key drivers (demo weighting):**
- **Payment history** (on-time payments): Biggest positive factor.
- **Credit utilization** (% of credit used): Lower is better; try to keep it **<30%**.
- **Credit age** (years): Longer history helps.
- **Hard inquiries** (last 12 months): Fewer is better.
- **Delinquencies** (last 24 months): Strong negative impact.

We estimate a **credit score** from your inputs to power a simplified risk model for demonstration purposes.
        """
    )

# Applicant & notes
st.subheader("Applicant")
colA, colB = st.columns([2, 1])
with colA:
    applicant_name = st.text_input("Full name (optional)", "")
with colB:
    term_months = st.number_input("Loan term (months)", min_value=6, max_value=84, value=36, step=6)

# Income & debt
st.subheader("Income & Debt")
col1, col2 = st.columns(2)
with col1:
    gross_monthly_income = st.number_input("Gross monthly income (USD)", min_value=0.0, value=3500.0, step=100.0)
    monthly_debt_payments = st.number_input("Monthly debt payments (USD)", min_value=0.0, value=900.0, step=50.0)
with col2:
    loan_amount = st.number_input("Requested loan amount (USD)", min_value=0.0, value=8000.0, step=500.0)
    interest_rate_pct = st.number_input("Estimated APR (%)", min_value=0.0, value=18.0, step=0.5)

# Credit behavior
st.subheader("Credit Behavior")
col3, col4 = st.columns(2)
with col3:
    on_time_payment_ratio = st.slider("On-time payment ratio (last 24 months)", 0.50, 1.00, 0.97, 0.01)
    credit_utilization_pct = st.slider("Credit utilization (%)", 0, 100, 35, 1)
with col4:
    credit_age_years = st.number_input("Credit history age (years)", min_value=0.0, value=5.0, step=0.5)
    hard_inquiries_last_12m = st.number_input("Hard inquiries (last 12 months)", min_value=0, value=1, step=1)
    delinquencies_24m = st.number_input("Delinquencies (last 24 months)", min_value=0, value=0, step=1)

notes = st.text_area("Notes (optional)", placeholder="Add any relevant context…")



# -------------------------------
# Derived Metrics
# -------------------------------

dti = 0.0
if gross_monthly_income > 0:
    dti = (monthly_debt_payments / gross_monthly_income) * 100.0

credit_score = estimate_credit_score(
    on_time_payment_ratio=on_time_payment_ratio,
    credit_utilization_pct=float(credit_utilization_pct),
    credit_age_years=credit_age_years,
    hard_inquiries_last_12m=int(hard_inquiries_last_12m),
    delinquencies_24m=int(delinquencies_24m),
)

st.subheader("Derived Metrics")
m1, m2 = st.columns(2)
with m1:
    st.metric("Estimated Credit Score (demo)", f"{credit_score}")
with m2:
    st.metric("Debt-to-Income (DTI)", f"{dti:.1f}%")
	

# -------------------------------
# Predictions - Predict risk with demo model
# -------------------------------


model = load_model()

# Build feature vector (6 features) – same normalization
feat_credit_score = (credit_score - 300) / (850 - 300)
feat_dti = min(dti, 100) / 100.0
feat_util = float(min(credit_utilization_pct, 100)) / 100.0
feat_inquiries = min(hard_inquiries_last_12m, 10) / 10.0
feat_delinquencies = min(delinquencies_24m, 10) / 10.0
feat_age = min(credit_age_years, 20) / 20.0

X_input = np.array([[feat_credit_score, feat_dti, feat_util, feat_inquiries, feat_delinquencies, feat_age]])

# IMPORTANT: treat proba for class=1 as "approval" for this demo model
approve_proba = float(model.predict_proba(X_input)[0, 1])

# Convert to default probability as the inverse (for risk band display only)
prob_default = 1.0 - approve_proba
prob_default_pct = prob_default * 100.0

# Risk band based on default probability
if prob_default < 0.25:
    risk_label = "Low"
elif prob_default < 0.30:
    risk_label = "Medium"
else:
    risk_label = "High"
	

# -------------------------------
# Decision logic: Three-way decision 
# -------------------------------

# Three-way decision on APPROVAL probability

APPROVE_T = 0.60
REVIEW_T = 0.40

if approve_proba >= APPROVE_T:
    decision = "APPROVE"
elif approve_proba >= REVIEW_T:
    decision = "MANUAL REVIEW"
else:
    decision = "DECLINE"

# Show result
st.subheader("Model Result")
r1, r2 = st.columns(2)
with r1:
    st.metric("Default Probability (demo)", f"{prob_default_pct:.1f}%")
with r2:
    st.metric("Risk Band", risk_label)

st.success(f"**Suggested Decision:** {decision}  "
           f"(Approve ≥ {APPROVE_T:.0%} • Review {REVIEW_T:.0%}–{APPROVE_T:.0%} • Decline < {REVIEW_T:.0%})")

# keep this name for downstream PDF
suggested_decision = decision.title()


# -------------------------------
# Input Widgets
# -------------------------------

# Build inputs & summary dicts for PDF
inputs = {
    "gross_monthly_income": gross_monthly_income,
    "monthly_debt_payments": monthly_debt_payments,
    "on_time_payment_ratio": on_time_payment_ratio,
    "credit_utilization_pct": float(credit_utilization_pct),
    "credit_age_years": credit_age_years,
    "hard_inquiries_last_12m": int(hard_inquiries_last_12m),
    "delinquencies_24m": int(delinquencies_24m),
    "loan_amount": loan_amount,
    "interest_rate_pct": interest_rate_pct,
    "term_months": term_months,
}

pdf_summary = {
    "applicant_name": applicant_name.strip() or "—",
    "credit_score": credit_score,
    "dti": dti,
    "prob_default_pct": prob_default_pct,
    "risk_label": risk_label,
    "decision": suggested_decision,
    "notes": notes.strip(),
}


# -------------------------------
# Output & PDF download
# -------------------------------
# PDF download
st.divider()
st.subheader("Export")
pdf_bytes = generate_pdf(pdf_summary, inputs)
st.download_button(
    label="⬇️ Download PDF summary",
    data=pdf_bytes,
    file_name="loan_decision_summary.pdf",
    mime="application/pdf",
)

# Footer
st.caption("This is a simplified demonstration app. For education and testing only.")
